<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VarWISE Viewer</title>
    <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">
    <script src="https://cdn.plot.ly/plotly-3.1.0.min.js" charset="utf-8"></script>
    <script src="http://danml.com/js/download.js"></script>
    <style>
        :root {
            color-scheme: light only !important;
        }
        body{
            display: block;
            padding: 1.75em;
        }
        h2{
            margin-top: 0px;
            margin-bottom: 0px;
        }
        .type{
            font-size: 32px;
            padding: 0px 1em;
            color: #590f0f;
            font-style: italic;
        }
        .frame{
            width: 100%;
            display: grid;
            grid-template-rows: 3.5em 5fr 7fr;
            grid-auto-flow: row;
        }
        td, th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #dddddd;  
        }
        .title{
            width: 100%;
            padding: 10px 10%;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            grid-auto-flow: row;
            vertical-align: middle;
            margin-bottom: 1em;
        }

        .center{
            display: grid;
            grid-auto-columns: 1fr 1fr;
            grid-auto-flow: column;
        }

        .nextprev{
            font-size: 16px;
        }

        #title{
            font-size: 30px;
            
        }

        .folding_container{
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            height: 100%;
        }

        #period{
            width: 14em;
            counter-increment: none;
        }

        #folded_lightcurve{
            width: 100%;
            height: 30em;
        }
        #lightcurve{
            width: 100%;
            height: 35em;
        }
        .bottom{
            display: grid;
            grid-auto-flow: row;
            grid-template-columns: 2fr 3fr;
            margin-top: 2em;
            padding: 1em;
        }

        #wiseview{
            width: 100%;
            height: 100%;
            border: 2px solid black;
            margin: 1em
            
        }
        .home{
            width: 40px;
            height: 40px;
            position: absolute;
            top: 0;
            left: 0;
            margin: 1.75em;
        }
    </style>
</head>
<body id="body">
<a href="/" class="home"><svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 26 26"><path d="M 20 2.03125 C 19.449219 2.03125 19 2.480469 19 3.03125 L 19 7.8125 L 13.71875 2.53125 C 13.328125 2.140625 12.671875 2.140625 12.28125 2.53125 L 0.5625 14.28125 C 0.171875 14.671875 0.171875 15.296875 0.5625 15.6875 C 0.953125 16.078125 1.578125 16.078125 1.96875 15.6875 L 13 4.65625 L 24.0625 15.71875 C 24.257813 15.914063 24.523438 16.03125 24.78125 16.03125 C 25.039063 16.03125 25.273438 15.914063 25.46875 15.71875 C 25.859375 15.328125 25.859375 14.703125 25.46875 14.3125 L 22 10.84375 L 22 3.03125 C 22 2.480469 21.550781 2.03125 21 2.03125 Z M 13 6.5 L 2 17.5 L 2 23 C 2 24.65625 3.34375 26 5 26 L 21 26 C 22.65625 26 24 24.65625 24 23 L 24 17.5 Z M 11 16 L 15 16 C 15.550781 16 16 16.449219 16 17 L 16 23 C 16 23.550781 15.550781 24 15 24 L 11 24 C 10.449219 24 10 23.550781 10 23 L 10 17 C 10 16.449219 10.449219 16 11 16 Z"/></svg></a>
<div class="frame">
    <div class="title">
        <button id="previous" class="nextprev">Previous Object</button>
        <h2 id="title">{{ titletext }} <span class="type">{{ type }}</span></h2>
        <button id="next" class="nextprev">Next Object</button>
    </div>
    <div class="center">
        <div class="left">
            <div style="display:flex;gap:12px;align-items:center;flex-wrap:wrap;margin-bottom:8px;">
                <span style="font-weight:600;">Traces:</span>
                <label><input type="checkbox" id="toggle_w1" checked> W1</label>
                <label><input type="checkbox" id="toggle_w2"> W2</label>
                <label><input type="checkbox" id="toggle_color"> W1 − W2</label>
            </div>
            <div id="lightcurve"></div>
        </div>

        <div class="right">
            <div class="folding_container">
                <div id="folded_lightcurve"></div>
                <div>period = <input type="number" id="period"></div>
            </div>
        </div>
    </div>
    <div class="bottom">
        <div style="display:flex;justify-content:start;flex-direction: column;">
                <table>
                    {% set col_items = columns.items()|list %}
                    {% for i in range(0, col_items|length, 2) %}
                    <tr>
                        {% for j in [0, 1] %}
                            {% if i + j < col_items|length %}
                                <th>{{ col_items[i + j][0] }}</th>
                                <td>{{ col_items[i + j][1] }}</td>
                            {% endif %}
                        {% endfor %}
                    </tr>
                    {% endfor %}
                </table>
                <br style="height:0;"> 
                <span>Coordinates: {{ columns['RAJ2000'] }}, {{ columns['DecJ2000'] }}</span>
                <br>
            
        </div>
        <div id="wiseview">
            <embed type="text/html" width="100%" height="100%" id="wiseview_emb" />
        </div>
    </div>

    <div style="margin-top: 1.5em;">
        <h3 style="margin-bottom: 0.5em;">ZTF Lightcurve (async)</h3>
        <div id="ztf_container" style="min-height: 320px; border: 1px solid #ddd; display:flex; align-items:center; justify-content:center;">
            <span id="ztf_status" style="color:#666;">Loading ZTF lightcurve…</span>
        </div>
    </div>

</div>  

<script type="text/javascript">

    var columns = {{ columns | tojson }};    
    var series = {{ lc_series | safe }};

    function makePlot(x, w1, w1s, w2, w2s, title, xaxis, yaxis, target, visibility) {
        // Compute W1-W2 color and its uncertainty (sigma = sqrt(sigma1^2 + sigma2^2))
        var n = Math.min(w1.length, w2.length);
        var color = new Array(n);
        var color_err = new Array(n);
        for (var i = 0; i < n; i++) {
            color[i] = (w1[i] != null && w2[i] != null) ? (w1[i] - w2[i]) : null;
            var e1 = (w1s && w1s[i] != null) ? w1s[i] : null;
            var e2 = (w2s && w2s[i] != null) ? w2s[i] : null;
            color_err[i] = (e1 != null && e2 != null) ? Math.sqrt(e1*e1 + e2*e2) : null;
        }

        var trace_w1 = {
            x: x,
            y: w1,
            mode: 'markers',
            marker: {size: 5.5, color: 'rgb(31,119,180)', line: {color: 'rgba(0,0,0,0.3)', width: 0.5}},
            opacity: 0.9,
            marker_symbol: 'square',
            error_y: {type: 'data', array: w1s, visible: true, color: 'rgba(0,0,255,0.35)'},
            name: 'W1',
            visible: visibility && visibility.w1 ? true : false
        };
        var trace_w2 = {
            x: x,
            y: w2,
            mode: 'markers',
            marker: {size: 5.5, color: 'rgb(214,39,40)', line: {color: 'rgba(0,0,0,0.3)', width: 0.5}},
            opacity: 0.9,
            marker_symbol: 'circle',
            error_y: {type: 'data', array: w2s, visible: true, color: 'rgba(220,20,60,0.35)'},
            name: 'W2',
            visible: visibility && visibility.w2 ? true : false
        };
        var trace_color = {
            x: x,
            y: color,
            mode: 'markers',
            marker: {size: 5.5, color: 'rgb(44,160,44)', line: {color: 'rgba(0,0,0,0.3)', width: 0.5}},
            opacity: 0.9,
            marker_symbol: 'diamond',
            error_y: {type: 'data', array: color_err, visible: true, color: 'rgba(46,139,87,0.35)'},
            name: 'W1 - W2',
            visible: visibility && visibility.color ? true : false
        };
        var layout = {
            title: {text: title},
            xaxis: {
                title: xaxis,
                showline: true, linewidth: 2, linecolor: 'black',
                mirror: true,
                ticks: 'outside', ticklen: 6, tickwidth: 1, tickcolor: 'black',
                gridcolor: '#e5e5e5', gridwidth: 1
            },
            yaxis: {
                title: yaxis,
                autorange: 'reversed',
                showline: true, linewidth: 2, linecolor: 'black',
                mirror: true,
                ticks: 'outside', ticklen: 6, tickwidth: 1, tickcolor: 'black',
                gridcolor: '#e5e5e5', gridwidth: 1
            },
            paper_bgcolor: 'white',
            plot_bgcolor: 'white',
            legend: {orientation: 'h', bgcolor: 'rgba(255,255,255,0.7)', bordercolor: 'rgba(0,0,0,0.15)', borderwidth: 1},
            margin: {l: 60, r: 20, t: 40, b: 60}
        };
        Plotly.newPlot(target, [trace_w1, trace_w2, trace_color], layout, {responsive: true, displaylogo: false, modeBarButtonsToRemove: ['select2d','lasso2d']});
    }

    function currentVisibility() {
        return {
            w1: document.getElementById('toggle_w1').checked,
            w2: document.getElementById('toggle_w2').checked,
            color: document.getElementById('toggle_color').checked,
        };
    }

    // Initial lightcurve plot with only W1 visible by default
    makePlot(series.t, series.w1, series.w1s, series.w2, series.w2s, 'Lightcurve', 'Time (MJD)', 'Magnitude', 'lightcurve', currentVisibility());

    var wv_url = "http://byw.tools/wiseview#ra="+ columns.RAJ2000 + "&dec=" + columns.DecJ2000 + "&gaia=1&band=3&size=120"

    document.getElementById("wiseview_emb").src = wv_url;


    function update_period(){
        var period = parseFloat(document.getElementById("period").value);
        if (!Number.isFinite(period) || !(period > 0)) {
            return;
        }
        // Use raw arrays from server (avoid typed arrays from Plotly traces)
        var t = series.t;
        var w1 = series.w1;
        var w1s = series.w1s;
        var w2 = series.w2;
        var w2s = series.w2s;

        var n = t.length;
        var phase = new Array(n);
        for (var i = 0; i < n; i++) {
            var ph = t[i] % period;
            if (ph < 0) ph += period;
            phase[i] = ph / period;
        }
        var phase2 = phase.concat(phase.map(function(v){ return v + 1; }));
        var w1_2 = w1.concat(w1);
        var w1s_2 = w1s.concat(w1s);
        var w2_2 = w2.concat(w2);
        var w2s_2 = w2s.concat(w2s);

        // Range 0..2 phase for folded view styling
        makePlot(phase2, w1_2, w1s_2, w2_2, w2s_2, 'p = ' + period + 'd', 'phase', 'Magnitude', 'folded_lightcurve', currentVisibility());
        Plotly.relayout('folded_lightcurve', {'xaxis.range': [0, 2]});
    }

    document.getElementById("period").addEventListener("change", update_period);
    // Trace toggle handlers: redraw both plots respecting visibility state
    document.getElementById('toggle_w1').addEventListener('change', function(){
        // Ensure at least one is visible; if all unchecked, re-enable W1
        if (!this.checked && !document.getElementById('toggle_w2').checked && !document.getElementById('toggle_color').checked) {
            this.checked = true;
        }
        makePlot(series.t, series.w1, series.w1s, series.w2, series.w2s, 'Lightcurve', 'Time (MJD)', 'Magnitude', 'lightcurve', currentVisibility());
        update_period();
    });
    document.getElementById('toggle_w2').addEventListener('change', function(){
        if (!this.checked && !document.getElementById('toggle_w1').checked && !document.getElementById('toggle_color').checked) {
            this.checked = true;
        }
        makePlot(series.t, series.w1, series.w1s, series.w2, series.w2s, 'Lightcurve', 'Time (MJD)', 'Magnitude', 'lightcurve', currentVisibility());
        update_period();
    });
    document.getElementById('toggle_color').addEventListener('change', function(){
        if (!this.checked && !document.getElementById('toggle_w1').checked && !document.getElementById('toggle_w2').checked) {
            this.checked = true;
        }
        makePlot(series.t, series.w1, series.w1s, series.w2, series.w2s, 'Lightcurve', 'Time (MJD)', 'Magnitude', 'lightcurve', currentVisibility());
        update_period();
    });
    var pd = {{ defaultperiod }};
    document.getElementById("period").value = pd;
    update_period();


    var prevnext = {{ prevnext | safe }};
    var prev_id = prevnext[0];
    var next_id = prevnext[1];
    // Add event listeners to the next and previous buttons

    function loading() {
        document.getElementById("body").innerHTML =`
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
            <h1>Querying Data...</h1>
        </div>`;
    }

    document.getElementById("next").addEventListener("click", function(){
        loading();
        window.location.href = "/object/" + next_id;
    });
    document.getElementById("previous").addEventListener("click", function(){
        loading();
        window.location.href = "/object/" + prev_id;
    });

    // --- ZTF lightcurve (async) ---
    (function(){
        const ra = columns.RAJ2000;
        const dec = columns.DecJ2000;
        const rad = 3.0; // arcsec
        const url = `/api/ztf?ra=${encodeURIComponent(ra)}&dec=${encodeURIComponent(dec)}&rad=${encodeURIComponent(rad)}`;
        const container = document.getElementById('ztf_container');
        const status = document.getElementById('ztf_status');

        function plotZTF(data){
            const mjd = data.mjd || [];
            const mag = data.mag || [];
            const magerr = data.magerr || [];
            // Clear status
            if (status) status.remove();
            const targetId = 'ztf_plot';
            const plotDiv = document.createElement('div');
            plotDiv.id = targetId;
            plotDiv.style.width = '100%';
            plotDiv.style.height = '360px';
            container.innerHTML = '';
            container.appendChild(plotDiv);

            const trace = {
                x: mjd,
                y: mag,
                mode: 'markers',
                marker: {size: 5.5, color: 'rgb(99,110,250)', line: {color: 'rgba(0,0,0,0.3)', width: 0.5}},
                opacity: 0.9,
                error_y: {type: 'data', array: magerr, visible: true, color: 'rgba(99,110,250,0.35)'},
                name: 'ZTF (r/g mix)'
            };
            const layout = {
                xaxis: {
                    title: 'MJD', showline: true, linewidth: 2, linecolor: 'black', mirror: true,
                    ticks: 'outside', ticklen: 6, tickwidth: 1, tickcolor: 'black', gridcolor: '#e5e5e5', gridwidth: 1
                },
                yaxis: {
                    title: 'Magnitude', autorange: 'reversed', showline: true, linewidth: 2, linecolor: 'black', mirror: true,
                    ticks: 'outside', ticklen: 6, tickwidth: 1, tickcolor: 'black', gridcolor: '#e5e5e5', gridwidth: 1
                },
                paper_bgcolor: 'white', plot_bgcolor: 'white', margin: {l: 60, r: 20, t: 10, b: 60}, legend: {orientation: 'h'}
            };
            Plotly.newPlot(targetId, [trace], layout, {responsive: true, displaylogo: false, modeBarButtonsToRemove: ['select2d','lasso2d']});
        }

        fetch(url)
            .then(r => r.json())
            .then(json => {
                if (json && !json.error) {
                    plotZTF(json);
                } else {
                    if (status) status.textContent = json && json.error ? json.error : 'No data available';
                }
            })
            .catch(err => {
                if (status) status.textContent = 'Failed to load ZTF lightcurve';
                console.error('ZTF fetch error:', err);
            });
    })();
</script>
</body>
</html>
